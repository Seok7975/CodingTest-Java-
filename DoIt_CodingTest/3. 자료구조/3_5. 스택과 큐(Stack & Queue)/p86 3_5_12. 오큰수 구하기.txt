오큰수 구하기
An의 수보다 다음 위치에 있는 Am중에 가장 왼쪽에 있는 수 구하기

N = 4
A = { 3 5 2 7 }
answer = {5 7 7 -1}

발상
1. 스택에 인덱스를 담아 n번째를 계산, 새로 들어오는 수의 인덱스를 갖는 An+1의 숫자가 Stack의 top의 인덱스인 An보다 크면 오큰수

2. 오큰수를 구한 후 반복문이 끝나면 오큰수가 비워져 있는 answer의 빈부분에 -1을 채워넣기


[answer 채우기]
0. stack

    0         A[0] = { 3 }

1. i =1

	stack 

	0
-----------------------------------------
	A[0] < A[1]  ( 3 < 5) 
	answer[0] = A[1] = 5
-----------------------------------------
	stack
	empty
------------------------------------------
	stack.push(1)
	stack

	1	

2. i = 2

	stack
	1
------------------------------------------
	A[1] > A[2] ( 5 > 2)
------------------------------------------
	stack
	2
	1

3. i = 3
	stack
	2
	1
------------------------------------------
	A[2] < A[3] ( 2 < 7)
	answer[2] = A[3] = 7

	stack
	1

	A[1] < A[3] (5 < 7)
	answer[1] = A[3] = 7

	stack
	empty
------------------------------------------
	stack
	3



[빈 공간 -1]
while(!myStack.empty()) {
	answer[myStack.pop()] = -1;
}
 
answer[3] = -1 

stack
empty